{"level":"error","timestamp":"01-02-2025 22:54:43","message":"Error in login method: Error: Incorrect email or password. Please try again.","data":{}}
{"level":"error","timestamp":"01-02-2025 22:54:50","message":"register user service error : PrismaClientValidationError: \nInvalid `this.prisma.user.create()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:136:43\n\n  133 //Replace the plain password with hashed password\n  134 const userData = { ...user, password: hashedPassword };\n  135 //Save the user to database\n→ 136 const data = await this.prisma.user.create({\n        data: {\n          firstname: \"Aloui\",\n          lastname: \"Louai\",\n          email: \"louaialoui1993@gmail.com\",\n          password: \"$2b$10$IxGBw0tt.yYdaz8sXpejxuo6DMiUTJ4VUzXDegQkb.PLwtqjCMRoe\",\n      +   avatar: String\n        }\n      })\n\nArgument `avatar` is missing.","data":{}}
{"level":"error","timestamp":"01-02-2025 22:54:50","message":"Error in register method: PrismaClientValidationError: \nInvalid `this.prisma.user.create()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:136:43\n\n  133 //Replace the plain password with hashed password\n  134 const userData = { ...user, password: hashedPassword };\n  135 //Save the user to database\n→ 136 const data = await this.prisma.user.create({\n        data: {\n          firstname: \"Aloui\",\n          lastname: \"Louai\",\n          email: \"louaialoui1993@gmail.com\",\n          password: \"$2b$10$IxGBw0tt.yYdaz8sXpejxuo6DMiUTJ4VUzXDegQkb.PLwtqjCMRoe\",\n      +   avatar: String\n        }\n      })\n\nArgument `avatar` is missing.","data":{}}
{"level":"error","timestamp":"01-02-2025 22:58:54","message":"register user service error : Error: Email is already in use.","data":{}}
{"level":"error","timestamp":"01-02-2025 22:58:54","message":"Error in register method: Error: Email is already in use.","data":{}}
{"level":"error","timestamp":"01-02-2025 22:59:00","message":"register user service error : PrismaClientValidationError: \nInvalid `this.prisma.user.create()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:136:43\n\n  133 //Replace the plain password with hashed password\n  134 const userData = { ...user, password: hashedPassword };\n  135 //Save the user to database\n→ 136 const data = await this.prisma.user.create({\n        data: {\n          firstname: \"Aloui\",\n          lastname: \"Louai\",\n          email: \"louaialoui@gmail.com\",\n          password: \"$2b$10$0ROFCJZvww1BWt14ia/fneewQdIrAUwDmYFg2GlLjCnPHF7HRZbRa\",\n      +   avatar: String\n        }\n      })\n\nArgument `avatar` is missing.","data":{}}
{"level":"error","timestamp":"01-02-2025 22:59:00","message":"Error in register method: PrismaClientValidationError: \nInvalid `this.prisma.user.create()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:136:43\n\n  133 //Replace the plain password with hashed password\n  134 const userData = { ...user, password: hashedPassword };\n  135 //Save the user to database\n→ 136 const data = await this.prisma.user.create({\n        data: {\n          firstname: \"Aloui\",\n          lastname: \"Louai\",\n          email: \"louaialoui@gmail.com\",\n          password: \"$2b$10$0ROFCJZvww1BWt14ia/fneewQdIrAUwDmYFg2GlLjCnPHF7HRZbRa\",\n      +   avatar: String\n        }\n      })\n\nArgument `avatar` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 12:56:37","message":"Error during logout: \nInvalid `this.prisma.user.findUnique()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:127:43\n\n  124 public async logoutUser(userId: number): Promise<void> {\n  125   try {\n  126     // Ensure user exists by ID\n→ 127     const user = await this.prisma.user.findUnique({\n            where: {\n          +   id: Int\n            }\n          })\n\nArgument `id` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 12:56:37","message":"Error in logout method: PrismaClientValidationError: \nInvalid `this.prisma.user.findUnique()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:127:43\n\n  124 public async logoutUser(userId: number): Promise<void> {\n  125   try {\n  126     // Ensure user exists by ID\n→ 127     const user = await this.prisma.user.findUnique({\n            where: {\n          +   id: Int\n            }\n          })\n\nArgument `id` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 12:59:59","message":"Error during logout: \nInvalid `this.prisma.user.findUnique()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:127:43\n\n  124 public async logoutUser(userId: number): Promise<void> {\n  125   try {\n  126     // Ensure user exists by ID\n→ 127     const user = await this.prisma.user.findUnique({\n            where: {\n          +   id: Int\n            }\n          })\n\nArgument `id` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 12:59:59","message":"Error in logout method: PrismaClientValidationError: \nInvalid `this.prisma.user.findUnique()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:127:43\n\n  124 public async logoutUser(userId: number): Promise<void> {\n  125   try {\n  126     // Ensure user exists by ID\n→ 127     const user = await this.prisma.user.findUnique({\n            where: {\n          +   id: Int\n            }\n          })\n\nArgument `id` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:04:32","message":"Error during logout: \nInvalid `this.prisma.user.findUnique()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:43\n\n  125 try {\n  126   this.logger.info('USERID : ', userId);\n  127   // Ensure user exists by ID\n→ 128   const user = await this.prisma.user.findUnique({\n          where: {\n        +   id: Int\n          }\n        })\n\nArgument `id` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:04:32","message":"Error in logout method: PrismaClientValidationError: \nInvalid `this.prisma.user.findUnique()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:43\n\n  125 try {\n  126   this.logger.info('USERID : ', userId);\n  127   // Ensure user exists by ID\n→ 128   const user = await this.prisma.user.findUnique({\n          where: {\n        +   id: Int\n          }\n        })\n\nArgument `id` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:05:46","message":"Error during logout: \nInvalid `this.prisma.user.findUnique()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:43\n\n  125 try {\n  126   this.logger.info('USERID : ', userId);\n  127   // Ensure user exists by ID\n→ 128   const user = await this.prisma.user.findUnique({\n          where: {\n        +   id: Int\n          }\n        })\n\nArgument `id` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:05:46","message":"Error in logout method: PrismaClientValidationError: \nInvalid `this.prisma.user.findUnique()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:43\n\n  125 try {\n  126   this.logger.info('USERID : ', userId);\n  127   // Ensure user exists by ID\n→ 128   const user = await this.prisma.user.findUnique({\n          where: {\n        +   id: Int\n          }\n        })\n\nArgument `id` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:25:54","message":"Error during logout: \nInvalid `this.prisma.token.findFirst()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:51\n\n  125 try {\n  126   this.logger.info('USERID : ', token);\n  127   // Ensure user exists by ID\n→ 128   const tokenObject = await this.prisma.token.findFirst({\n          where: {\n        +   token: {\n        +     equals: String | StringFieldRefInput,\n        +     in: String[] | ListStringFieldRefInput,\n        +     notIn: String[] | ListStringFieldRefInput,\n        +     lt: String | StringFieldRefInput,\n        +     lte: String | StringFieldRefInput,\n        +     gt: String | StringFieldRefInput,\n        +     gte: String | StringFieldRefInput,\n        +     contains: String | StringFieldRefInput,\n        +     startsWith: String | StringFieldRefInput,\n        +     endsWith: String | StringFieldRefInput,\n        +     mode: QueryMode,\n        +     not: String | NestedStringFilter\n        +   }\n          }\n        })\n\nArgument `token` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:25:54","message":"Error in logout method: PrismaClientValidationError: \nInvalid `this.prisma.token.findFirst()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:51\n\n  125 try {\n  126   this.logger.info('USERID : ', token);\n  127   // Ensure user exists by ID\n→ 128   const tokenObject = await this.prisma.token.findFirst({\n          where: {\n        +   token: {\n        +     equals: String | StringFieldRefInput,\n        +     in: String[] | ListStringFieldRefInput,\n        +     notIn: String[] | ListStringFieldRefInput,\n        +     lt: String | StringFieldRefInput,\n        +     lte: String | StringFieldRefInput,\n        +     gt: String | StringFieldRefInput,\n        +     gte: String | StringFieldRefInput,\n        +     contains: String | StringFieldRefInput,\n        +     startsWith: String | StringFieldRefInput,\n        +     endsWith: String | StringFieldRefInput,\n        +     mode: QueryMode,\n        +     not: String | NestedStringFilter\n        +   }\n          }\n        })\n\nArgument `token` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:27:48","message":"Error during logout: \nInvalid `this.prisma.token.findFirst()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:51\n\n  125 try {\n  126   this.logger.info('USERID : ', token);\n  127   // Ensure user exists by ID\n→ 128   const tokenObject = await this.prisma.token.findFirst({\n          where: {\n            token: {\n        +     equals: String\n            }\n          }\n        })\n\nArgument `equals` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:27:48","message":"Error in logout method: PrismaClientValidationError: \nInvalid `this.prisma.token.findFirst()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:51\n\n  125 try {\n  126   this.logger.info('USERID : ', token);\n  127   // Ensure user exists by ID\n→ 128   const tokenObject = await this.prisma.token.findFirst({\n          where: {\n            token: {\n        +     equals: String\n            }\n          }\n        })\n\nArgument `equals` is missing.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:28:58","message":"Error during logout: \nInvalid `this.prisma.token.findFirst()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:51\n\n  125 try {\n  126   this.logger.info('USERID : ', token);\n  127   // Ensure user exists by ID\n→ 128   const tokenObject = await this.prisma.token.findFirst({\n          where: {\n            token: {\n              equals: 19\n                      ~~\n            }\n          }\n        })\n\nArgument `equals`: Invalid value provided. Expected String or StringFieldRefInput, provided Int.","data":{}}
{"level":"error","timestamp":"01-03-2025 13:28:58","message":"Error in logout method: PrismaClientValidationError: \nInvalid `this.prisma.token.findFirst()` invocation in\nL:\\express-bun-server\\src\\service\\auth.services.ts:128:51\n\n  125 try {\n  126   this.logger.info('USERID : ', token);\n  127   // Ensure user exists by ID\n→ 128   const tokenObject = await this.prisma.token.findFirst({\n          where: {\n            token: {\n              equals: 19\n                      ~~\n            }\n          }\n        })\n\nArgument `equals`: Invalid value provided. Expected String or StringFieldRefInput, provided Int.","data":{}}
